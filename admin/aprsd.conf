# $Id$
#aprsd 2.1.5 server configuration file
#
#This file is read ONCE on server startup.
#You must restart aprsd for changes to take effect.
#eg: /etc/rc.d/init.d/aprsd.init stop (then start)
#
#Lines starting with "#" are comments and are ignored
#Key words such as "mycall" and "maxusers" are NOT case sensitive.
#MyCall is the same as mycall.
#
#*** There is no error checking so be careful ******
#
#
#Servercall is the ax25 source call used in packets
#sent from the server to Internet users. (9 chars max)
#Note: Does not go out on the air.
#
servercall testCHO  
#
#MyCall will be over written by the MYCALL string in INIT.TNC
#if "tncport" has been defined.
#
MyCall KG4IJB
#
MyLocation Charlottesville_VA
#
#This email address will be sent in replies to ?IGATE? queries.
# Also, it will be on the status web pages on port 14501.
MyEmail cbyam@virginia.edu
#
#Set MaxUsers and MaxLoad to values that your Internet connection can support.
# Set MaxLoad in bytes/sec.   If either value is exceeded
# new users can't connect.
MaxUsers 150
MaxLoad 100000000000
#
#
#Define beacon text. The server will supply the ax25 path header.
#The first number after "NetBeacon" is the time interval in minutes.
#Comment out the line or set time interval to 0 to disable beacon.
#The rest of the line can be any aprs protocol conforming packet.
#
NetBeacon 10 !3802.21NI07830.61W& APRS Server
#
#Define the TNC beacon. The TNC will supply the ax25 path header.
#It's optional and you may use the TNC BTEXT in the INIT.TNC file instead.
#
#TncBeacon 15 !0000.00N/00000.00W& aprsd Linux APRS Server
#
#
#Send 2 extra message acks is addition to each received ack to TNC
#Range 0 to 9
ackrepeats 2
#
#Send extra acks at 5 second intervals
#Range 1 to 30 seconds
ackrepeattime 5
#
#Set history list items to expire in 35 minutes
expire 35
#
#Define the TNC serial port and baud rate.
#Note: This device must have write permissions
#If undefined all TNC related functions are disabled.
#Permissable baud rates are 1200,2400,4800,9600 and 19200.
#
#tncport /dev/ttyS0
#tncbaud 9600
#
# Allow Internet to RF message passing.
rf-allow yes
#
#Set filterNoGate "yes" to block RFONLY and NOGATE packets
filterNoGate yes
#
#Set history-allow to NO if you do not want users to get history dumps.
history-allow no 
#
#TRACE causes the server to append its own callsign to the end
#of the AX25 path of every packet processed.  
#To conserver bandwidth this should only be
#done for short periods to track sources of problems.
#
Trace no
#
#Set this to 'yes' if you want to log ALL PACKETS heard on RF to /home/aprsd2/rf.log
#If 'no' then only packets with your callsign will be logged.
logAllRF no
#
# Allow the insecure aprs passcodes to be used
# Note: "no" means all users need Linux user names and passwords
#       and aprsd must be run as root for that to work.
aprsPass yes
#
#Set the minimum time between TNC transmit packets in milliseconds
TncPktSpacing 1500
#
# Disallow packets transmitted from our own TNC from 
# being igated back to the Internet after being digipeated.
igateMyCall no
#
#This determines if Mic-E packets are converted to classic APRS packets.
#Put 'no' unless you have a very good reason to do conversions. 
#This option must also be enabled in the SOURCE CODE. To turn it on
#you must edit "constant.h" and change CONVERT_MIC_E from FALSE to TRUE.
#then recompile aprsd. 
ConvertMicE no
#
#
#The PASS command.  The callsign supplied in MyCall and this
# passcode allow you to send data to distant servers.
# PASS can be computed from MYCALL with the aprspass program.
# Note: This example is invalid. Use your passcode.
#
pass 18094
#
#-------------------------------
#Server connection definitions
#
#usage: <Server> <host name> < host port> <TYPE-DIR> <optional OmniPort filter command>
#
#The TYPE-DIR field sets the connecton type and data flow.
# TYPE is  either "SERVER" or "HUB"
#  SERVER connections attempts to maintain a connection to the designated host
#  HUB connections maintain a connection to only ONE hub and rotate to the next
#  if the connectin fails.
# DIR is either "RO" or "SR"  RO is Receive Only. SR is Send and Receive.
#Eamples: HUB-RO   HUB-SR  SERVER-RO SERVER-SR
# If you select -SR to send data you must also supply a passcode
# using the "PASS" command. See above.
#
#These commands are NOT case sensitive.
# ** Defaults to Server-RO if TYPE-DIR not specified. **
#
#
#Example send-receive  HUB connections
#Hub is like Server except only ONE hub connection is active at a time.
#If the hub connection fails the next hub is tried in rotation until one accepts a connection.
#
Server second.aprs.net 23 hub-sr
Server first.aprs.net 23 hub-sr
Server third.aprs.net 23 hub-sr
#Server rotate.aprs.net 23 hub-sr
#
#
#Example Receive-Only HUB connecton
#Server first.aprs.net 23 hub-ro
#
#Example Send-Receive SERVER connection.  The SERVER type maintains a connection to
#the specified server.  No rotation.
#Server first.aprs.net 23 server-sr
#
#Example of OmniPort connection to receive the local stream (tnc).
#Note: OmniPort is currently available only on aprsd 2.1.5
#
#Server atlanta.aprs.net 14600 server-ro portfilter(local)
#
#Receive the full stream.
#Server atlanta.aprs.net 14600 server-ro portfilter(full)
#
#
#These servers are provided as a reference. Some may no longer be active.
#You really only need the two or three HUB connections above unless
# you are doing something unusual.
#
#server second.aprs.net 1313 server-ro
#server third.aprs.net 1313 server-ro
#server socal-igate.aprs.claremont.edu 1313 server-ro
#server first.aprs.net 23 
#server atlanta.aprs.net 1313 server-ro
#server aprsdkw.dyndns.org 1313
#server aprs.k9iu.ampr.org 1313
#server atlanta.aprs.net 1313
#server baltimore.aprs.net 1313
#server calgary.aprs.net 1313
#server concord.aprs.net 1313
#server cosprings.aprs.net 1313
#server dayton.aprs.net 14439
#server elansing.aprs.net 1313
#server gw.officine.it 1313
#server hamgate.cs.usu.edu 1313
#server kb2ear.aprs.net 1313
#server kd6wxd.dynip.com 10148
#server marconi.ece.cmu.edu 14579
#server michigan.aprs.net 1313
#server milwaukee.aprs.net 1313
#server montreal.aprs.net 1313 
#server mulvey.dyndns.com 1313
#server netherlands.aprs.net 1313
#server newyork.aprs.net 1313
#server ontario.aprs.net 1313
#server orlando.aprs.net 1313
#server radio.artsfac.csuohio.edu 1313
#server radio-active.net.au 1313
#server sandiego.aprs.net 1313
#server santabarbara.aprs.net 1313
#server saopaulo.aprs.net 1313
#server swiss.aprs.net 14579
#server temple.aprs.net 1313
#server tucson.aprs.net 1313
#server wv.aprs.net 1313
#---------------------------------
#
#Define server listen ports
#Read ports.html for more info.
#
rawtncport 14580
localport 14579
mainport 10151
mainport-nh 23
linkport 1313
msgport 1314
udpport 1315
sysopPort 14500
httpport 14501
ipwatchport 14502
errorport 14503
omniport 14600
#
#define trusted users of the UDP port.
#usage: trust <ip address> <subnet mask>
#trust 208.148.145.151
#trust 208.148.145.144 255.255.255.240
#
#Selected call signs which are always gated to RF
#if they are not seen locally. All packets from
#these are gated in real time. Do not use unless
#you really need real time data.  Consider posit2rf below.
#They are case sensitive! Use upper case. Up to 64 may be defined.
#As of version 2.1.5 the * wild card character is supported.
#All characters beyond the * are ignored.  
#ie: WA4* would match ALL call signs beginning with "WA4"
#
#gate2rf K4HG-8 N4NEQ* 
#gate2rf W7LUS-14
#
#Call signs of stations whose posits are gated
#to RF every 15 minutes.  Only posit packets are
#gated.  Posits are taken from the history list.
#They are case sensitive! Use upper case.
#
#posit2rf K4HG-8
#
#Define a list of message destination call signs or aliases 
#to gate to RF full time.  Note: the CQGA example 
#below is CQ GA (Georgia). Edit to suite your locale.
#Up to 64 of these may be defined. They are case sensitive.
#
msgdest2rf SCOUTS KIDS CQGA
#
#end



